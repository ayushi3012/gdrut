{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "d = pd.read_csv('Dating Dataset.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iid</th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>idg</th>\n",
       "      <th>condtn</th>\n",
       "      <th>wave</th>\n",
       "      <th>round</th>\n",
       "      <th>position</th>\n",
       "      <th>positin1</th>\n",
       "      <th>order</th>\n",
       "      <th>...</th>\n",
       "      <th>attr3_3</th>\n",
       "      <th>sinc3_3</th>\n",
       "      <th>intel3_3</th>\n",
       "      <th>fun3_3</th>\n",
       "      <th>amb3_3</th>\n",
       "      <th>attr5_3</th>\n",
       "      <th>sinc5_3</th>\n",
       "      <th>intel5_3</th>\n",
       "      <th>fun5_3</th>\n",
       "      <th>amb5_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7</td>\n",
       "      <td>...</td>\n",
       "      <td>5.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 193 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   iid   id  gender  idg  condtn  wave  round  position  positin1  order  \\\n",
       "0    1  1.0       0    1       1     1     10         7       NaN      4   \n",
       "1    1  1.0       0    1       1     1     10         7       NaN      3   \n",
       "2    1  1.0       0    1       1     1     10         7       NaN     10   \n",
       "3    1  1.0       0    1       1     1     10         7       NaN      5   \n",
       "4    1  1.0       0    1       1     1     10         7       NaN      7   \n",
       "\n",
       "    ...    attr3_3  sinc3_3  intel3_3  fun3_3  amb3_3  attr5_3  sinc5_3  \\\n",
       "0   ...        5.0      7.0       7.0     7.0     7.0      NaN      NaN   \n",
       "1   ...        5.0      7.0       7.0     7.0     7.0      NaN      NaN   \n",
       "2   ...        5.0      7.0       7.0     7.0     7.0      NaN      NaN   \n",
       "3   ...        5.0      7.0       7.0     7.0     7.0      NaN      NaN   \n",
       "4   ...        5.0      7.0       7.0     7.0     7.0      NaN      NaN   \n",
       "\n",
       "   intel5_3  fun5_3  amb5_3  \n",
       "0       NaN     NaN     NaN  \n",
       "1       NaN     NaN     NaN  \n",
       "2       NaN     NaN     NaN  \n",
       "3       NaN     NaN     NaN  \n",
       "4       NaN     NaN     NaN  \n",
       "\n",
       "[5 rows x 193 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iid</th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>idg</th>\n",
       "      <th>condtn</th>\n",
       "      <th>wave</th>\n",
       "      <th>round</th>\n",
       "      <th>position</th>\n",
       "      <th>positin1</th>\n",
       "      <th>order</th>\n",
       "      <th>...</th>\n",
       "      <th>attr3_3</th>\n",
       "      <th>sinc3_3</th>\n",
       "      <th>intel3_3</th>\n",
       "      <th>fun3_3</th>\n",
       "      <th>amb3_3</th>\n",
       "      <th>attr5_3</th>\n",
       "      <th>sinc5_3</th>\n",
       "      <th>intel5_3</th>\n",
       "      <th>fun5_3</th>\n",
       "      <th>amb5_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>8378.000000</td>\n",
       "      <td>8377.000000</td>\n",
       "      <td>8378.000000</td>\n",
       "      <td>8378.000000</td>\n",
       "      <td>8378.000000</td>\n",
       "      <td>8378.000000</td>\n",
       "      <td>8378.000000</td>\n",
       "      <td>8378.000000</td>\n",
       "      <td>6532.000000</td>\n",
       "      <td>8378.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>3974.000000</td>\n",
       "      <td>3974.000000</td>\n",
       "      <td>3974.000000</td>\n",
       "      <td>3974.000000</td>\n",
       "      <td>3974.000000</td>\n",
       "      <td>2016.000000</td>\n",
       "      <td>2016.000000</td>\n",
       "      <td>2016.000000</td>\n",
       "      <td>2016.000000</td>\n",
       "      <td>2016.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>283.675937</td>\n",
       "      <td>8.960248</td>\n",
       "      <td>0.500597</td>\n",
       "      <td>17.327166</td>\n",
       "      <td>1.828837</td>\n",
       "      <td>11.350919</td>\n",
       "      <td>16.872046</td>\n",
       "      <td>9.042731</td>\n",
       "      <td>9.295775</td>\n",
       "      <td>8.927668</td>\n",
       "      <td>...</td>\n",
       "      <td>7.240312</td>\n",
       "      <td>8.093357</td>\n",
       "      <td>8.388777</td>\n",
       "      <td>7.658782</td>\n",
       "      <td>7.391545</td>\n",
       "      <td>6.810020</td>\n",
       "      <td>7.615079</td>\n",
       "      <td>7.932540</td>\n",
       "      <td>7.155258</td>\n",
       "      <td>7.048611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>158.583367</td>\n",
       "      <td>5.491329</td>\n",
       "      <td>0.500029</td>\n",
       "      <td>10.940735</td>\n",
       "      <td>0.376673</td>\n",
       "      <td>5.995903</td>\n",
       "      <td>4.358458</td>\n",
       "      <td>5.514939</td>\n",
       "      <td>5.650199</td>\n",
       "      <td>5.477009</td>\n",
       "      <td>...</td>\n",
       "      <td>1.576596</td>\n",
       "      <td>1.610309</td>\n",
       "      <td>1.459094</td>\n",
       "      <td>1.744670</td>\n",
       "      <td>1.961417</td>\n",
       "      <td>1.507341</td>\n",
       "      <td>1.504551</td>\n",
       "      <td>1.340868</td>\n",
       "      <td>1.672787</td>\n",
       "      <td>1.717988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>154.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>281.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>7.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>407.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>552.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>44.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows Ã— 188 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               iid           id       gender          idg       condtn  \\\n",
       "count  8378.000000  8377.000000  8378.000000  8378.000000  8378.000000   \n",
       "mean    283.675937     8.960248     0.500597    17.327166     1.828837   \n",
       "std     158.583367     5.491329     0.500029    10.940735     0.376673   \n",
       "min       1.000000     1.000000     0.000000     1.000000     1.000000   \n",
       "25%     154.000000     4.000000     0.000000     8.000000     2.000000   \n",
       "50%     281.000000     8.000000     1.000000    16.000000     2.000000   \n",
       "75%     407.000000    13.000000     1.000000    26.000000     2.000000   \n",
       "max     552.000000    22.000000     1.000000    44.000000     2.000000   \n",
       "\n",
       "              wave        round     position     positin1        order  \\\n",
       "count  8378.000000  8378.000000  8378.000000  6532.000000  8378.000000   \n",
       "mean     11.350919    16.872046     9.042731     9.295775     8.927668   \n",
       "std       5.995903     4.358458     5.514939     5.650199     5.477009   \n",
       "min       1.000000     5.000000     1.000000     1.000000     1.000000   \n",
       "25%       7.000000    14.000000     4.000000     4.000000     4.000000   \n",
       "50%      11.000000    18.000000     8.000000     9.000000     8.000000   \n",
       "75%      15.000000    20.000000    13.000000    14.000000    13.000000   \n",
       "max      21.000000    22.000000    22.000000    22.000000    22.000000   \n",
       "\n",
       "          ...           attr3_3      sinc3_3     intel3_3       fun3_3  \\\n",
       "count     ...       3974.000000  3974.000000  3974.000000  3974.000000   \n",
       "mean      ...          7.240312     8.093357     8.388777     7.658782   \n",
       "std       ...          1.576596     1.610309     1.459094     1.744670   \n",
       "min       ...          2.000000     2.000000     3.000000     2.000000   \n",
       "25%       ...          7.000000     7.000000     8.000000     7.000000   \n",
       "50%       ...          7.000000     8.000000     8.000000     8.000000   \n",
       "75%       ...          8.000000     9.000000     9.000000     9.000000   \n",
       "max       ...         12.000000    12.000000    12.000000    12.000000   \n",
       "\n",
       "            amb3_3      attr5_3      sinc5_3     intel5_3       fun5_3  \\\n",
       "count  3974.000000  2016.000000  2016.000000  2016.000000  2016.000000   \n",
       "mean      7.391545     6.810020     7.615079     7.932540     7.155258   \n",
       "std       1.961417     1.507341     1.504551     1.340868     1.672787   \n",
       "min       1.000000     2.000000     2.000000     4.000000     1.000000   \n",
       "25%       6.000000     6.000000     7.000000     7.000000     6.000000   \n",
       "50%       8.000000     7.000000     8.000000     8.000000     7.000000   \n",
       "75%       9.000000     8.000000     9.000000     9.000000     8.000000   \n",
       "max      12.000000    10.000000    10.000000    10.000000    10.000000   \n",
       "\n",
       "            amb5_3  \n",
       "count  2016.000000  \n",
       "mean      7.048611  \n",
       "std       1.717988  \n",
       "min       1.000000  \n",
       "25%       6.000000  \n",
       "50%       7.000000  \n",
       "75%       8.000000  \n",
       "max      10.000000  \n",
       "\n",
       "[8 rows x 188 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 8378 entries, 0 to 8377\n",
      "Data columns (total 193 columns):\n",
      "iid            int64\n",
      "id             float64\n",
      "gender         int64\n",
      "idg            int64\n",
      "condtn         int64\n",
      "wave           int64\n",
      "round          int64\n",
      "position       int64\n",
      "positin1       float64\n",
      "order          int64\n",
      "partner        int64\n",
      "pid            float64\n",
      "match          int64\n",
      "int_corr       float64\n",
      "samerace       int64\n",
      "age_o          float64\n",
      "race_o         float64\n",
      "pf_o_att       float64\n",
      "pf_o_sin       float64\n",
      "pf_o_int       float64\n",
      "pf_o_fun       float64\n",
      "pf_o_amb       float64\n",
      "pf_o_sha       float64\n",
      "dec_o          int64\n",
      "attr_o         float64\n",
      "sinc_o         float64\n",
      "intel_o        float64\n",
      "fun_o          float64\n",
      "amb_o          float64\n",
      "shar_o         float64\n",
      "like_o         float64\n",
      "prob_o         float64\n",
      "met_o          float64\n",
      "age            float64\n",
      "Unnamed: 34    float64\n",
      "field_cd       float64\n",
      "undergra       object\n",
      "mn_sat         object\n",
      "tuition        object\n",
      "race           float64\n",
      "imprace        float64\n",
      "imprelig       float64\n",
      "zipcode        object\n",
      "income         object\n",
      "goal           float64\n",
      "date           float64\n",
      "go_out         float64\n",
      "career_c       float64\n",
      "sports         float64\n",
      "tvsports       float64\n",
      "exercise       float64\n",
      "dining         float64\n",
      "museums        float64\n",
      "art            float64\n",
      "hiking         float64\n",
      "gaming         float64\n",
      "clubbing       float64\n",
      "reading        float64\n",
      "tv             float64\n",
      "theater        float64\n",
      "movies         float64\n",
      "concerts       float64\n",
      "music          float64\n",
      "shopping       float64\n",
      "yoga           float64\n",
      "exphappy       float64\n",
      "expnum         float64\n",
      "attr1_1        float64\n",
      "sinc1_1        float64\n",
      "intel1_1       float64\n",
      "fun1_1         float64\n",
      "amb1_1         float64\n",
      "shar1_1        float64\n",
      "attr4_1        float64\n",
      "sinc4_1        float64\n",
      "intel4_1       float64\n",
      "fun4_1         float64\n",
      "amb4_1         float64\n",
      "shar4_1        float64\n",
      "attr2_1        float64\n",
      "sinc2_1        float64\n",
      "intel2_1       float64\n",
      "fun2_1         float64\n",
      "amb2_1         float64\n",
      "shar2_1        float64\n",
      "attr3_1        float64\n",
      "sinc3_1        float64\n",
      "fun3_1         float64\n",
      "intel3_1       float64\n",
      "amb3_1         float64\n",
      "attr5_1        float64\n",
      "sinc5_1        float64\n",
      "intel5_1       float64\n",
      "fun5_1         float64\n",
      "amb5_1         float64\n",
      "dec            int64\n",
      "attr           float64\n",
      "sinc           float64\n",
      "intel          float64\n",
      "fun            float64\n",
      "amb            float64\n",
      "shar           float64\n",
      "like           float64\n",
      "prob           float64\n",
      "met            float64\n",
      "match_es       float64\n",
      "attr1_s        float64\n",
      "sinc1_s        float64\n",
      "intel1_s       float64\n",
      "fun1_s         float64\n",
      "amb1_s         float64\n",
      "shar1_s        float64\n",
      "attr3_s        float64\n",
      "sinc3_s        float64\n",
      "intel3_s       float64\n",
      "fun3_s         float64\n",
      "amb3_s         float64\n",
      "satis_2        float64\n",
      "length         float64\n",
      "numdat_2       float64\n",
      "attr7_2        float64\n",
      "sinc7_2        float64\n",
      "intel7_2       float64\n",
      "fun7_2         float64\n",
      "amb7_2         float64\n",
      "shar7_2        float64\n",
      "attr1_2        float64\n",
      "sinc1_2        float64\n",
      "intel1_2       float64\n",
      "fun1_2         float64\n",
      "amb1_2         float64\n",
      "shar1_2        float64\n",
      "attr4_2        float64\n",
      "sinc4_2        float64\n",
      "intel4_2       float64\n",
      "fun4_2         float64\n",
      "amb4_2         float64\n",
      "shar4_2        float64\n",
      "attr2_2        float64\n",
      "sinc2_2        float64\n",
      "intel2_2       float64\n",
      "fun2_2         float64\n",
      "amb2_2         float64\n",
      "shar2_2        float64\n",
      "attr3_2        float64\n",
      "sinc3_2        float64\n",
      "intel3_2       float64\n",
      "fun3_2         float64\n",
      "amb3_2         float64\n",
      "attr5_2        float64\n",
      "sinc5_2        float64\n",
      "intel5_2       float64\n",
      "fun5_2         float64\n",
      "amb5_2         float64\n",
      "you_call       float64\n",
      "them_cal       float64\n",
      "date_3         float64\n",
      "numdat_3       float64\n",
      "num_in_3       float64\n",
      "attr1_3        float64\n",
      "sinc1_3        float64\n",
      "intel1_3       float64\n",
      "fun1_3         float64\n",
      "amb1_3         float64\n",
      "shar1_3        float64\n",
      "attr7_3        float64\n",
      "sinc7_3        float64\n",
      "intel7_3       float64\n",
      "fun7_3         float64\n",
      "amb7_3         float64\n",
      "shar7_3        float64\n",
      "attr4_3        float64\n",
      "sinc4_3        float64\n",
      "intel4_3       float64\n",
      "fun4_3         float64\n",
      "amb4_3         float64\n",
      "shar4_3        float64\n",
      "attr2_3        float64\n",
      "sinc2_3        float64\n",
      "intel2_3       float64\n",
      "fun2_3         float64\n",
      "amb2_3         float64\n",
      "shar2_3        float64\n",
      "attr3_3        float64\n",
      "sinc3_3        float64\n",
      "intel3_3       float64\n",
      "fun3_3         float64\n",
      "amb3_3         float64\n",
      "attr5_3        float64\n",
      "sinc5_3        float64\n",
      "intel5_3       float64\n",
      "fun5_3         float64\n",
      "amb5_3         float64\n",
      "dtypes: float64(175), int64(13), object(5)\n",
      "memory usage: 12.3+ MB\n"
     ]
    }
   ],
   "source": [
    "d.info(verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "iid            0\n",
       "id             1\n",
       "gender         0\n",
       "idg            0\n",
       "condtn         0\n",
       "wave           0\n",
       "round          0\n",
       "position       0\n",
       "positin1    1846\n",
       "order          0\n",
       "partner        0\n",
       "pid           10\n",
       "match          0\n",
       "int_corr     158\n",
       "samerace       0\n",
       "age_o        104\n",
       "race_o        73\n",
       "pf_o_att      89\n",
       "pf_o_sin      89\n",
       "pf_o_int      89\n",
       "pf_o_fun      98\n",
       "pf_o_amb     107\n",
       "pf_o_sha     129\n",
       "dec_o          0\n",
       "attr_o       212\n",
       "sinc_o       287\n",
       "intel_o      306\n",
       "fun_o        360\n",
       "amb_o        722\n",
       "shar_o      1076\n",
       "            ... \n",
       "amb1_3      4404\n",
       "shar1_3     4404\n",
       "attr7_3     6362\n",
       "sinc7_3     6362\n",
       "intel7_3    6362\n",
       "fun7_3      6362\n",
       "amb7_3      6362\n",
       "shar7_3     6362\n",
       "attr4_3     5419\n",
       "sinc4_3     5419\n",
       "intel4_3    5419\n",
       "fun4_3      5419\n",
       "amb4_3      5419\n",
       "shar4_3     5419\n",
       "attr2_3     5419\n",
       "sinc2_3     5419\n",
       "intel2_3    5419\n",
       "fun2_3      5419\n",
       "amb2_3      5419\n",
       "shar2_3     6362\n",
       "attr3_3     4404\n",
       "sinc3_3     4404\n",
       "intel3_3    4404\n",
       "fun3_3      4404\n",
       "amb3_3      4404\n",
       "attr5_3     6362\n",
       "sinc5_3     6362\n",
       "intel5_3    6362\n",
       "fun5_3      6362\n",
       "amb5_3      6362\n",
       "Length: 193, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0xcdcf320>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nMND/A1uji+/1bYHcAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xc5c1b38>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "age = d[np.isfinite(d['age'])]['age']\n",
    "plt.hist(age.values)\n",
    "plt.xlabel('Age')\n",
    "plt.ylabel('Frequency')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1380"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum((d['match']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8378"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(d['match'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16.47171162568632"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "float(1380)/8378 *100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "d1 = d.loc[:, (d.isnull().sum(axis=0) <=500)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "iid           0\n",
       "id            1\n",
       "gender        0\n",
       "idg           0\n",
       "condtn        0\n",
       "wave          0\n",
       "round         0\n",
       "position      0\n",
       "order         0\n",
       "partner       0\n",
       "pid          10\n",
       "match         0\n",
       "int_corr    158\n",
       "samerace      0\n",
       "age_o       104\n",
       "race_o       73\n",
       "pf_o_att     89\n",
       "pf_o_sin     89\n",
       "pf_o_int     89\n",
       "pf_o_fun     98\n",
       "pf_o_amb    107\n",
       "pf_o_sha    129\n",
       "dec_o         0\n",
       "attr_o      212\n",
       "sinc_o      287\n",
       "intel_o     306\n",
       "fun_o       360\n",
       "like_o      250\n",
       "prob_o      318\n",
       "met_o       385\n",
       "           ... \n",
       "concerts     79\n",
       "music        79\n",
       "shopping     79\n",
       "yoga         79\n",
       "exphappy    101\n",
       "attr1_1      79\n",
       "sinc1_1      79\n",
       "intel1_1     79\n",
       "fun1_1       89\n",
       "amb1_1       99\n",
       "shar1_1     121\n",
       "attr2_1      79\n",
       "sinc2_1      79\n",
       "intel2_1     79\n",
       "fun2_1       79\n",
       "amb2_1       89\n",
       "shar2_1      89\n",
       "attr3_1     105\n",
       "sinc3_1     105\n",
       "fun3_1      105\n",
       "intel3_1    105\n",
       "amb3_1      105\n",
       "dec           0\n",
       "attr        202\n",
       "sinc        277\n",
       "intel       296\n",
       "fun         350\n",
       "like        240\n",
       "prob        309\n",
       "met         375\n",
       "Length: 82, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d1.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "d2 = d1.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>iid</th>\n",
       "      <th>id</th>\n",
       "      <th>gender</th>\n",
       "      <th>idg</th>\n",
       "      <th>condtn</th>\n",
       "      <th>wave</th>\n",
       "      <th>round</th>\n",
       "      <th>position</th>\n",
       "      <th>order</th>\n",
       "      <th>partner</th>\n",
       "      <th>...</th>\n",
       "      <th>intel3_1</th>\n",
       "      <th>amb3_1</th>\n",
       "      <th>dec</th>\n",
       "      <th>attr</th>\n",
       "      <th>sinc</th>\n",
       "      <th>intel</th>\n",
       "      <th>fun</th>\n",
       "      <th>like</th>\n",
       "      <th>prob</th>\n",
       "      <th>met</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>...</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>...</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>...</td>\n",
       "      <td>7.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 82 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    iid   id  gender  idg  condtn  wave  round  position  order  partner ...   \\\n",
       "30    4  4.0       0    7       1     1     10         6      3        1 ...    \n",
       "31    4  4.0       0    7       1     1     10         6      2        2 ...    \n",
       "33    4  4.0       0    7       1     1     10         6      4        4 ...    \n",
       "34    4  4.0       0    7       1     1     10         6      6        5 ...    \n",
       "35    4  4.0       0    7       1     1     10         6      5        6 ...    \n",
       "\n",
       "    intel3_1  amb3_1  dec  attr  sinc  intel   fun  like  prob  met  \n",
       "30       7.0     8.0    0   4.0  10.0    8.0   5.0   6.0   7.0  2.0  \n",
       "31       7.0     8.0    0   8.0   7.0    8.0  10.0   8.0   1.0  1.0  \n",
       "33       7.0     8.0    1   8.0  10.0    7.0  10.0   8.0  10.0  1.0  \n",
       "34       7.0     8.0    0   6.0   9.0    8.0   9.0   7.0   7.0  2.0  \n",
       "35       7.0     8.0    0   5.0  10.0    8.0   4.0   4.0   3.0  2.0  \n",
       "\n",
       "[5 rows x 82 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nFRcXKzExUUlJSVq5cqVqamokSXl5eZo0aZISEhJ08OBBSVJ5eblSUlKUlJSk2bNn68qVK34aBgAg\n0NUbSG+++aaWL1+uiooKSVJGRobmz5+vLVu2yBij/Px8lZaWKicnR7m5udq0aZOysrJUWVmprVu3\nKjIyUlu2bNHEiRO1ceNGvw8IABCY6g2kiIgIZWdn+14XFhZq2LBhkqSRI0fqo48+0qlTpzR48GC5\n3W6Fh4crIiJCRUVFKigo0IgRI3zzHjt2zE/DAAAEunofYR4XF6eSkhLfa2OMHA6HJCk0NFRlZWXy\neDwKDw/3zRMaGiqPx1Nr+s15GyI7O1vr169v1ECAtoY+QHtTbyD9L6fzPwdVXq9XnTp1UlhYmLxe\nb63p4eHhtabfnLchUlJSlJKSUmtaSUmJYmNjG1suELDoA7Q3jb7Krl+/fjp+/Lgk6ciRIxo6dKii\noqJUUFCgiooKlZWV6fz584qMjFR0dLQOHz7sm3fIkCHNWz0AoM1o9BFSamqqVqxYoaysLPXq1Utx\ncXFyuVxKTk5WUlKSjDFasGCBQkJClJiYqNTUVCUmJio4OFiZmZn+GAMAoA1oUCD16NFDeXl5kqSe\nPXvq7bffvmWehIQEJSQk1JrWsWNHvfrqq81QJgCgreOLsQAAKxBIAAArEEgAACsQSAAAKxBIAAAr\nEEgAACsQSAAAKxBIAAArEEgAACsQSAAAKxBIAAArEEgAACsQSAAAKxBIAAArEEgAACsQSAAAKxBI\nAAArEEgAACsQSAAAKxBIAAArEEgAACsQSAAAKxBIAAArEEgAACsENXXB+Ph4hYWFSZJ69OihuXPn\nasmSJXI4HOrTp49Wrlwpp9OpvLw85ebmKigoSPPmzdPo0aObrXgAQNvRpECqqKiQMUY5OTm+aXPn\nztX8+fM1fPhwvfDCC8rPz9egQYOUk5Ojbdu2qaKiQklJSYqJiZHb7W62AQAA2oYmBVJRUZGuX7+u\nmTNn6saNG1q4cKEKCws1bNgwSdLIkSN19OhROZ1ODR48WG63W263WxERESoqKlJUVFSzDgIAEPia\nFEgdOnTQrFmzNHXqVF24cEGzZ8+WMUYOh0OSFBoaqrKyMnk8HoWHh/uWCw0NlcfjqXf92dnZWr9+\nfVNKA9oM+gDtTZMCqWfPnrr//vvlcDjUs2dPde7cWYWFhb73vV6vOnXqpLCwMHm93lrT/zug7iQl\n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\nCgQSAMAKBFIbtGTJEv3qV79q7TKAVkcvBBYCCQBgBb6H1AYYY7R69WodOnRI3bt3V3V1taZMmSKn\n06nNmzerpqZG/fv318qVKxUSEqJdu3bptddek8Ph0MCBA7Vq1SoFBwffdt01NTVKT0/XsWPH5HA4\nNGHCBM2ZM6eFRwg0DL0Q2DhCagP27dunM2fO6L333tMrr7yiv/zlL7p+/bry8vKUm5urHTt26Mtf\n/rI2bdqkS5cuKSMjQz//+c+1e/duVVdX6/Dhw3dc99atW/X5559r586deuedd/TBBx/o0KFDLTc4\noBHohcAWEDdXRd0+/vhjjRkzRsHBwerSpYtGjhwpY4yKi4uVkJAgSaqqqlK/fv104sQJRUdH6777\n7pMkrV27ts51Hz9+XPHx8XK5XOrYsaOefPJJHTt2TA8//LC/hwU0Gr0Q2AikNsDhcKimpsb3Oigo\nSNXV1Ro3bpyWL18u6Ys78lZXV+vjjz+uteyVK1ckyfe0zP/13+uVvjglUl1d3ZzlA82GXghsnLJr\nAx566CHt3btXlZWV+te//qVf//rXkqT9+/fr8uXLMsYoLS1Nmzdv1sCBA3Xy5EmVlpZKktLT05Wf\nn3/HdX/nO9/R9u3bVV1drevXr2vXrl0aPnx4i4wLaCx6IbBxUUMbsW7dOr3//vvq2rWrvvSlL2n8\n+PGqrq72/SH3wQcfVHp6ukJCQrR3715t3LhRNTU1GjRokF588UW5XK7brreqqkpr1qzRb3/7W1VV\nVWnChAn64Q9/2MKjAxqOXghcBBIAwAr8DQnas2ePXn/99du+99/PYQHaOnqhdXGEBACwAhc1AACs\nQCABAKxAIAEArEAgAQCsQCABAKxAIAEArPB/e48U0JgPYOwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xf938908>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(style=\"ticks\", color_codes=True)\n",
    "g = sns.FacetGrid(d2, col=\"gender\")\n",
    "g = g.map(plt.hist, \"dec_o\")\n",
    "plt.ticklabel_format(useOffset=False, style='plain')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import statsmodels.api as sm\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>           <td>dec</td>       <th>  R-squared:         </th> <td>   0.602</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.602</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   1708.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 04 Mar 2019</td> <th>  Prob (F-statistic):</th>  <td>  0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>22:59:54</td>     <th>  Log-Likelihood:    </th> <td> -3682.7</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  6777</td>      <th>  AIC:               </th> <td>   7377.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  6771</td>      <th>  BIC:               </th> <td>   7418.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     6</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>        <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>attr</th>     <td>    0.0555</td> <td>    0.004</td> <td>   15.673</td> <td> 0.000</td> <td>    0.049</td> <td>    0.062</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>sinc</th>     <td>   -0.0350</td> <td>    0.004</td> <td>   -8.699</td> <td> 0.000</td> <td>   -0.043</td> <td>   -0.027</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>intel</th>    <td>   -0.0490</td> <td>    0.004</td> <td>  -11.960</td> <td> 0.000</td> <td>   -0.057</td> <td>   -0.041</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>fun</th>      <td>    0.0175</td> <td>    0.004</td> <td>    4.542</td> <td> 0.000</td> <td>    0.010</td> <td>    0.025</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>like</th>     <td>    0.0998</td> <td>    0.004</td> <td>   22.252</td> <td> 0.000</td> <td>    0.091</td> <td>    0.109</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>int_corr</th> <td>   -0.0362</td> <td>    0.017</td> <td>   -2.177</td> <td> 0.030</td> <td>   -0.069</td> <td>   -0.004</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>4594.859</td> <th>  Durbin-Watson:     </th> <td>   1.534</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th>  <td> 0.000</td>  <th>  Jarque-Bera (JB):  </th> <td> 393.390</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>           <td> 0.071</td>  <th>  Prob(JB):          </th> <td>3.77e-86</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>       <td> 1.828</td>  <th>  Cond. No.          </th> <td>    50.2</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                    dec   R-squared:                       0.602\n",
       "Model:                            OLS   Adj. R-squared:                  0.602\n",
       "Method:                 Least Squares   F-statistic:                     1708.\n",
       "Date:                Mon, 04 Mar 2019   Prob (F-statistic):               0.00\n",
       "Time:                        22:59:54   Log-Likelihood:                -3682.7\n",
       "No. Observations:                6777   AIC:                             7377.\n",
       "Df Residuals:                    6771   BIC:                             7418.\n",
       "Df Model:                           6                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "attr           0.0555      0.004     15.673      0.000       0.049       0.062\n",
       "sinc          -0.0350      0.004     -8.699      0.000      -0.043      -0.027\n",
       "intel         -0.0490      0.004    -11.960      0.000      -0.057      -0.041\n",
       "fun            0.0175      0.004      4.542      0.000       0.010       0.025\n",
       "like           0.0998      0.004     22.252      0.000       0.091       0.109\n",
       "int_corr      -0.0362      0.017     -2.177      0.030      -0.069      -0.004\n",
       "==============================================================================\n",
       "Omnibus:                     4594.859   Durbin-Watson:                   1.534\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              393.390\n",
       "Skew:                           0.071   Prob(JB):                     3.77e-86\n",
       "Kurtosis:                       1.828   Cond. No.                         50.2\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_ols = d2[['attr','sinc','intel','fun','like','int_corr']]\n",
    "y_ols = d2.dec\n",
    "traits = sm.OLS(y_ols, X_ols)\n",
    "results_traits = traits.fit()\n",
    "results_traits.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>          <td>match</td>      <th>  R-squared:         </th> <td>   0.647</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.647</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   1381.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 04 Mar 2019</td> <th>  Prob (F-statistic):</th>  <td>  0.00</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>23:01:41</td>     <th>  Log-Likelihood:    </th> <td> -183.75</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>  6777</td>      <th>  AIC:               </th> <td>   385.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>  6768</td>      <th>  BIC:               </th> <td>   446.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     9</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>        <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dec</th>      <td>    0.4464</td> <td>    0.007</td> <td>   62.107</td> <td> 0.000</td> <td>    0.432</td> <td>    0.460</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>dec_o</th>    <td>    0.4473</td> <td>    0.007</td> <td>   62.367</td> <td> 0.000</td> <td>    0.433</td> <td>    0.461</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>attr</th>     <td>   -0.0013</td> <td>    0.002</td> <td>   -0.592</td> <td> 0.554</td> <td>   -0.005</td> <td>    0.003</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>attr_o</th>   <td>   -0.0009</td> <td>    0.002</td> <td>   -0.443</td> <td> 0.658</td> <td>   -0.005</td> <td>    0.003</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>fun</th>      <td>    0.0006</td> <td>    0.002</td> <td>    0.252</td> <td> 0.801</td> <td>   -0.004</td> <td>    0.005</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>fun_o</th>    <td>    0.0011</td> <td>    0.002</td> <td>    0.481</td> <td> 0.631</td> <td>   -0.003</td> <td>    0.005</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>like</th>     <td>   -0.0161</td> <td>    0.003</td> <td>   -6.122</td> <td> 0.000</td> <td>   -0.021</td> <td>   -0.011</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>like_o</th>   <td>   -0.0168</td> <td>    0.003</td> <td>   -6.436</td> <td> 0.000</td> <td>   -0.022</td> <td>   -0.012</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>int_corr</th> <td>    0.0036</td> <td>    0.010</td> <td>    0.368</td> <td> 0.713</td> <td>   -0.016</td> <td>    0.023</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>71.292</td> <th>  Durbin-Watson:     </th> <td>   1.868</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 815.979</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 0.255</td> <th>  Prob(JB):          </th> <td>6.49e-178</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 1.378</td> <th>  Cond. No.          </th> <td>    51.4</td> \n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                  match   R-squared:                       0.647\n",
       "Model:                            OLS   Adj. R-squared:                  0.647\n",
       "Method:                 Least Squares   F-statistic:                     1381.\n",
       "Date:                Mon, 04 Mar 2019   Prob (F-statistic):               0.00\n",
       "Time:                        23:01:41   Log-Likelihood:                -183.75\n",
       "No. Observations:                6777   AIC:                             385.5\n",
       "Df Residuals:                    6768   BIC:                             446.9\n",
       "Df Model:                           9                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "dec            0.4464      0.007     62.107      0.000       0.432       0.460\n",
       "dec_o          0.4473      0.007     62.367      0.000       0.433       0.461\n",
       "attr          -0.0013      0.002     -0.592      0.554      -0.005       0.003\n",
       "attr_o        -0.0009      0.002     -0.443      0.658      -0.005       0.003\n",
       "fun            0.0006      0.002      0.252      0.801      -0.004       0.005\n",
       "fun_o          0.0011      0.002      0.481      0.631      -0.003       0.005\n",
       "like          -0.0161      0.003     -6.122      0.000      -0.021      -0.011\n",
       "like_o        -0.0168      0.003     -6.436      0.000      -0.022      -0.012\n",
       "int_corr       0.0036      0.010      0.368      0.713      -0.016       0.023\n",
       "==============================================================================\n",
       "Omnibus:                       71.292   Durbin-Watson:                   1.868\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              815.979\n",
       "Skew:                           0.255   Prob(JB):                    6.49e-178\n",
       "Kurtosis:                       1.378   Cond. No.                         51.4\n",
       "==============================================================================\n",
       "\n",
       "Warnings:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_ols = d2[['dec','dec_o','attr','attr_o','fun','fun_o','like','like_o','int_corr']]\n",
    "y_ols = d2.match\n",
    "traits = sm.OLS(y_ols, X_ols)\n",
    "results_traits = traits.fit()\n",
    "results_traits.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=d2[['like','dec']]\n",
    "y=d2['match']\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0, stratify=y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from sklearn import metrics\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "model = LogisticRegression(C=1, random_state=0)\n",
    "lrc = model.fit(X_train, y_train)\n",
    "predict_train_lrc = lrc.predict(X_train)\n",
    "predict_test_lrc = lrc.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Train_Accur:', 0.8247555801512636)\n",
      "('Valid_Accur:', 0.82448377581120946)\n"
     ]
    }
   ],
   "source": [
    "print('Train_Accur:', metrics.accuracy_score(y_train, predict_train_lrc))\n",
    "print('Valid_Accur:', metrics.accuracy_score(y_test, predict_test_lrc))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Training Accuracy:', 0.82844493635860539)\n",
      "('Validation Accuracy:', 0.82743362831858402)\n"
     ]
    }
   ],
   "source": [
    "model = RandomForestClassifier()\n",
    "rf_model = model.fit(X_train, y_train)\n",
    "predict_train_rf = rf_model.predict(X_train)\n",
    "predict_test_rf = rf_model.predict(X_test)\n",
    "print('Training Accuracy:', metrics.accuracy_score(y_train, predict_train_rf))\n",
    "print('Validation Accuracy:', metrics.accuracy_score(y_test, predict_test_rf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1118    0]\n",
      " [ 238    0]]\n"
     ]
    }
   ],
   "source": [
    "cm = metrics.confusion_matrix(y_test, predict_test_lrc)\n",
    "print(cm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "accuracy = float(1118)/(1118+238)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8244837758112095"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
